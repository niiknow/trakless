// Generated by CoffeeScript 1.9.3
var $defaults, $pixel, $sessionid, $siteid, $st, $trakless2, $userid, $uuid, Emitter, attrs, cookie, debounce, defaults, doc, docReady, fn, getImage, hasNOL, i, isDom, j, k, len, len1, lsqueue, mystore, mytrakless, myutil, prefix, query, queue, ref, ref1, script, session, tracker, trakless, traklessParent, util, uuid, webanalyser, win, xstore;

mystore = require('xstore');

xstore = new mystore();

Emitter = require('emitter');

cookie = require('cookie');

defaults = require('defaults');

query = require('querystring');

uuid = require('uuid');

webanalyser = require('webanalyser');

docReady = require('doc-ready');

debounce = require('debounce');

lsqueue = require('lsqueue');

queue = new lsqueue('tksq');

win = window;

doc = win.document;

hasNOL = win.navigator.onLine;

session = win.sessionStorage;

$siteid = 0;

$pixel = '//niiknow.github.io/pixel.gif';

$uuid = null;

$userid = null;

$st = (new Date(new Date().getFullYear(), 0, 1)).getTime();

$sessionid = new Date().getTime() - $st;

$defaults = null;

if (typeof session === 'undefined') {
  session = {
    getItem: function(k) {
      return cookie(k);
    },
    setItem: function(k, v) {
      return cookie(k, v, {
        path: '/'
      });
    }
  };
}

try {
  $sessionid = session.getItem('tklsid');
  if ($sessionid == null) {
    $sessionid = new Date().getTime() - $st;
    session.setItem('tklsid', $sessionid);
  }
} catch (_error) {

}


/**
 * Send image request to server using GET.
 * The infamous web bug (or beacon) is a transparent, single pixel (1x1) image
 *
 */

getImage = function(cfgUrl, tks, qs, callback) {
  var image, url;
  image = new Image(1, 1);
  if (cfgUrl.indexOf('//') === 0) {
    cfgUrl = win.location.protocol === 'https' ? "https:" + cfgUrl : "http:" + cfgUrl;
  }
  image.onload = function() {
    var iterator;
    iterator = 0;
    if (typeof callback === 'function') {
      callback();
    }
  };
  url = cfgUrl + (cfgUrl.indexOf('?') < 0 ? '?' : '&') + (tks + "&" + qs);
  image.src = url;
  return image;
};


/**
 * determine if a object is dom
 * @param  {Object}  obj the object
 * @return {Boolean}     true or false
 */

isDom = function(obj) {
  if ((obj != null)) {
    if (obj.nodeName) {
      switch (obj.nodeType) {
        case 1:
          return true;
        case 3:
          return object.nodeValue != null;
      }
    }
  }
  return false;
};


/**
 *  util
 */

util = (function() {
  function util() {}


  /**
   * allow for getting all attributes
   *
   * @param {HTMLElement} el - element
   * @return {Object}
   */

  util.prototype.allData = function(el) {
    var attr, camelCaseName, data, i, k, len, name, ref;
    data = {};
    if ((el != null)) {
      ref = el.attributes;
      for (k = i = 0, len = ref.length; i < len; k = ++i) {
        attr = ref[k];
        name = attr.name.replace(/^data-/g, '');
        camelCaseName = name.replace(/-(.)/g, function($0, $1) {
          return $1.toUpperCase();
        });
        data[camelCaseName] = attr.value;
      }
    }
    return data;
  };


  /**
   * parse a string to JSON, return string if fail
   *
   * @param {String} v - string value
   * @return {Object}
   */

  util.prototype.parseJSON = function(v) {
    var v2;
    if (typeof v === "string") {
      if (v.indexOf('{') >= 0 || v.indexOf('[') >= 0) {
        v2 = JSON.parse(v);
        if (!(v2 == null)) {
          return v2;
        }
      }
    }
    return v;
  };


  /**
   * parse a JSON to string, return string if fail
   *
   * @param {String} v - string value
   * @return {Object}
   */

  util.prototype.stringify = function(v) {
    if (typeof v === "string") {
      return v;
    }
    return JSON.stringify(v);
  };


  /**
   * get or set session data - store in cookie
   * if no value is provided, then it is a get
   *
   * @param {String} k - key
   * @param {Object} v - value
   * @return {Object}
   */

  util.prototype.session = function(k, v) {
    if ((v != null)) {
      if (!(typeof v === "string")) {
        v = this.stringify(v);
      }
      cookie('tls:' + k, v, {
        path: '/'
      });
      return v;
    }
    v = cookie('tls:' + k);
    if (typeof v === 'undefined') {
      return v;
    }
    return this.parseJSON(v);
  };


  /**
   * cookie
   *
   */

  util.prototype.cookie = cookie;


  /**
   * document ready
   *
   */

  util.prototype.ready = docReady;


  /**
   * Emitter
   *
   */

  util.prototype.Emitter = Emitter;


  /**
   * trim
   *
   */

  util.prototype.trim = function(v) {
    return v.replace(/^\s+|\s+$/gm, '');
  };

  return util;

})();

myutil = new util();


/**
 * tracker class
 *
 */

tracker = (function() {
  function tracker() {}

  tracker.prototype.pixel = '//niiknow.github.io/pixel.gif';

  tracker.prototype.siteid = 0;

  tracker.prototype.store = null;

  tracker.prototype.uuid = null;

  tracker.prototype.getId = function() {
    var self;
    self = this;
    return (self.siteid + "-" + self.pixel).replace(/[^a-zA-z]/gi, '$');
  };

  tracker.prototype._tk = function(data, ht, pixel) {
    var k, myData, self, tkd, v;
    self = this;
    tkd = {
      uuid: self.uuid,
      siteid: self.siteid,
      usid: $sessionid,
      ht: ht,
      z: data.z
    };
    if ($userid) {
      tkd.uid = $userid;
    }
    myData = {};
    for (k in data) {
      v = data[k];
      if (v != null) {
        if (!(typeof v === "string") || (myutil.trim(v).length > 0)) {
          if ((k + '') !== 'undefined' && k !== 'uuid' && k !== 'z' && !isDom(v)) {
            if (typeof v === 'boollean') {
              v = v ? 1 : 0;
            }
            myData[k] = v;
          }
        }
      }
    }
    self.emit('track', {
      ht: ht,
      pixel: pixel,
      qs: [tkd, myData]
    });
    getImage(pixel, query.stringify(tkd), query.stringify(myData));
    self.emit('tracked', {
      ht: ht,
      pixel: pixel,
      qs: [tkd, myData]
    });
    return self;
  };

  tracker.prototype._track = function(ht, ctx) {
    var pixel, self;
    self = this;
    if (ctx == null) {
      ctx = {};
    }
    if (self.siteid > 0) {
      pixel = myutil.trim(this.pixel);
      if (!self.uuid) {
        self.uuid = uuid();
        $uuid = self.uuid;
        if (self.store != null) {
          self.store.get('tklsuid').then(function(id) {
            if (!id) {
              self.store.set('tklsuid', self.uuid);
            }
            self.uuid = id || self.uuid;
            $uuid = self.uuid;
            return self._tk(ctx, ht, pixel);
          });
        }
      } else {
        self._tk(ctx, ht, pixel);
      }
    }
    return this;
  };


  /**
   * track generic method
   *
   * @param {String} ht - hit types with possible values of 'pageview', 'event', 'transaction', 'item', 'social', 'exception', 'timing', 'app', 'custom'
   * @param {Object} ctx - extended data
   * @return {Object}
   */

  tracker.prototype.track = function(ht, ctx) {
    var self;
    self = this;
    myutil.ready(function() {
      ctx = ctx || {};
      if (!ctx.z) {
        ctx.z = new Date().getTime() - $st;
      }
      return self._track(ht || 'custom', ctx);
    });
    return this;
  };

  return tracker;

})();

Emitter(tracker.prototype);


/**
 * tracker factory
 *
 */

mytrakless = (function() {

  /**
   * create an instance of trakless
   * @return {object}
   */
  function mytrakless() {
    var self;
    self = this;
    self._track = debounce(function() {
      var item, k, ref, v;
      self = this;
      if (!hasNOL || win.navigator.onLine) {
        item = queue.pop();
        if ((item != null)) {
          self.emit('track', item);
          ref = self.trackers;
          for (k in ref) {
            v = ref[k];
            v.track(item.ht, item.ctx);
          }
          return self.emit('tracked', item);
        }
      }
    }, 222);
    return self;
  }


  /**
   * store all trackers
   * @type {Object}
   */

  mytrakless.prototype.trackers = {};


  /**
   * set default siteid
   *
   * @param {Number} siteid - the site id
   * @return {Object}
   */

  mytrakless.prototype.setSiteId = function(siteid) {
    var mysid;
    mysid = parseInt(siteid);
    $siteid = mysid > 0 ? mysid : $siteid;
  };


  /**
   * set default pixel
   *
   * @param {String} pixel - the default pixel url
   * @return {Object}
   */

  mytrakless.prototype.setPixel = function(pixelUrl) {
    if (pixelUrl) {
      $pixel = pixelUrl || $pixel;
    }
  };


  /**
   * The domain user id.
   * @param {string} id the domain user id
   */

  mytrakless.prototype.setUserId = function(id) {
    if (id) {
      $userid = id || $userid;
    }
  };


  /**
   * the storage
   *
   * @return {Object}
   */

  mytrakless.prototype.store = xstore;


  /**
   * you can provide different siteid and pixelUrl for in multi-tracker and site scenario
   *
   * @param {Number} siteid - the siteid
   * @param {String} pixelUrl - the pixel url
   * @return {Object}
   */

  mytrakless.prototype.getTracker = function(siteid, pixelUrl) {
    var id, rst, self;
    self = this;
    rst = new tracker();
    rst.siteid = siteid != null ? siteid : $siteid;
    rst.pixel = pixelUrl != null ? pixelUrl : $pixel;
    if ((rst.siteid != null) && (rst.pixel != null)) {
      rst.store = xstore;
      id = rst.getId();
      if (!self.trackers[id]) {
        self.trackers[id] = rst;
        rst.on('tracked', self._track);
      }
      return self.trackers[id];
    }
    throw "siteid or pixelUrl is required";
  };


  /**
   * get the default racker
   *
   */

  mytrakless.prototype.getDefaultTracker = function() {
    var id, self;
    self = this;
    id = ($siteid + "-" + $pixel).replace(/[^a-zA-z]/gi, '$');
    if (self.trackers[id] == null) {
      self.getTracker();
    }
    return self.trackers[id];
  };


  /**
   * utility
   *
   */

  mytrakless.prototype.util = myutil;


  /**
   * track event
   * @param  {string} category
   * @param  {string} action
   * @param  {string} label
   * @param  {string} property
   * @param  {string} value
   * @return {object}
   */

  mytrakless.prototype.event = function(category, action, label, property, value) {
    if (value && value < 0) {
      value = null;
    }
    return this.track('event', {
      ec: category || 'event',
      ea: action,
      el: label,
      ep: property,
      ev: value
    });
  };


  /**
   * track page view
   * @param  {object} ctx context/addtional parameter
   * @return {object}
   */

  mytrakless.prototype.pageview = function(ctx) {
    return this.track('pageview', ctx);
  };


  /**
   * track anything
   * @param  {string} ht  hit type
   * @param  {object} ctx context/additonal parameter
   * @return {object}
   */

  mytrakless.prototype.track = function(ht, ctx) {
    var self;
    self = this;
    self.getDefaultTracker();
    ctx = ctx || {};
    ctx.z = new Date().getTime() - $st;
    queue.push({
      ht: ht,
      ctx: ctx,
      uuid: $uuid,
      usid: $sessionid,
      uid: $userid
    });
    self._track();
    return self;
  };


  /**
   * For situation when trakless is in an iframe, you can use this method
   * to emit event to the parent.
   * @param  {string} en event name
   * @param  {string} ed event detail
   * @return {object}    trakless
   */

  mytrakless.prototype.emitTop = function(en, ed) {
    if (typeof $trakless2 !== "undefined" && $trakless2 !== null) {
      $trakless2.emit(en, ed);
    }
    return this;
  };

  return mytrakless;

})();

trakless = new mytrakless;

Emitter(trakless);

$trakless2 = trakless;

if (win.top !== win) {
  try {
    traklessParent = win.top.trakless;
    $trakless2 = traklessParent;
  } catch (_error) {
    $trakless2 = win.parent.trakless;
  }
}

trakless.on('track', function(item) {
  var myDef;
  if (item.ht === 'pageview') {
    myDef = webanalyser.get();
    return item.ctx = defaults(item.ctx, myDef);
  }
});

attrs = {
  site: function(value) {
    return trakless.setSiteId(value);
  },
  pixel: function(value) {
    if (typeof value !== "string") {
      return;
    }
    return trakless.setPixel(value);
  }
};

ref = win.document.getElementsByTagName("script");
for (i = 0, len = ref.length; i < len; i++) {
  script = ref[i];
  if (/trakless/i.test(script.src)) {
    ref1 = ['', 'data-'];
    for (j = 0, len1 = ref1.length; j < len1; j++) {
      prefix = ref1[j];
      for (k in attrs) {
        fn = attrs[k];
        fn(script.getAttribute(prefix + k));
      }
    }
  }
}

win.trakless = trakless;

win._tk = trakless;

module.exports = trakless;
