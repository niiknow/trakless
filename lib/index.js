// Generated by CoffeeScript 1.9.2
var $defaultTracker, $defaults, $pixel, $sessionid, $siteid, $st, $trakless2, Emitter, attrs, cookie, debounce, defaults, doc, docReady, fn, getImage, i, j, k, len, len1, lsqueue, mystore, mytrakless, myutil, prefix, processQueue, query, queue, ref, ref1, script, session, tracker, trakless, traklessParent, util, uuid, webanalyser, win, xs, xstore;

mystore = require('xstore');

xstore = new mystore();

Emitter = require('emitter');

cookie = require('cookie');

defaults = require('defaults');

query = require('querystring');

uuid = require('uuid');

webanalyser = require('webanalyser');

docReady = require('doc-ready');

debounce = require('debounce');

lsqueue = require('lsqueue');

queue = new lsqueue('tksq');

win = window;

doc = win.document;

session = win.sessionStorage;

$defaultTracker = null;

$siteid = 0;

$pixel = '/pixel.gif';

xs = $st = new Date().getTime();

$defaults = null;

if (typeof session === 'undefined') {
  session = {
    getItem: function(k) {
      return cookie(k);
    },
    setItem: function(k, v) {
      return cookie(k, v, {
        path: '/'
      });
    }
  };
}

$sessionid = session.getItem('tksuid');

if ($sessionid == null) {
  $sessionid = new Date().getTime() - 1420092000000;
  session.setItem('tksuid', $sessionid);
}


/**
 * Send image request to server using GET.
 * The infamous web bug (or beacon) is a transparent, single pixel (1x1) image
#
 */

getImage = function(cfgUrl, tks, qs, callback) {
  var image, url;
  image = new Image(1, 1);
  image.onload = function() {
    var iterator;
    iterator = 0;
    if (typeof callback === 'function') {
      callback();
    }
  };
  url = cfgUrl + (cfgUrl.indexOf('?') < 0 ? '?' : '&') + (tks + "&" + qs);
  image.src = url;
  return image;
};

processQueue = debounce(function() {
  var item;
  item = queue.pop();
  if ((item != null)) {
    return getImage(item.pixel, item.tkd, item.myData, processQueue);
  }
}, 222);


/**
 *  util
 */

util = (function() {
  function util() {}


  /**
   * allow for getting all attributes
  #
   * @param {HTMLElement} el - element
   * @return {Object}
   */

  util.prototype.allData = function(el) {
    var attr, camelCaseName, data, i, k, len, name, ref;
    data = {};
    if ((el != null)) {
      ref = el.attributes;
      for (k = i = 0, len = ref.length; i < len; k = ++i) {
        attr = ref[k];
        name = attr.name.replace(/^data-/g, '');
        camelCaseName = name.replace(/-(.)/g, function($0, $1) {
          return $1.toUpperCase();
        });
        data[camelCaseName] = attr.value;
      }
    }
    return data;
  };


  /**
   * parse a string to JSON, return string if fail
  #
   * @param {String} v - string value
   * @return {Object}
   */

  util.prototype.parseJSON = function(v) {
    var v2;
    if (typeof v === "string") {
      if (v.indexOf('{') >= 0 || v.indexOf('[') >= 0) {
        v2 = JSON.parse(v);
        if (!(v2 == null)) {
          return v2;
        }
      }
    }
    return v;
  };


  /**
   * parse a JSON to string, return string if fail
  #
   * @param {String} v - string value
   * @return {Object}
   */

  util.prototype.stringify = function(v) {
    if (typeof v === "string") {
      return v;
    }
    return JSON.stringify(v);
  };


  /**
   * get or set session data - store in cookie
   * if no value is provided, then it is a get
  #
   * @param {String} k - key
   * @param {Object} v - value
   * @return {Object}
   */

  util.prototype.session = function(k, v) {
    if ((v != null)) {
      if (!(typeof v === "string")) {
        v = this.stringify(v);
      }
      cookie('tls:' + k, v, {
        path: '/'
      });
      return v;
    }
    v = cookie('tls:' + k);
    if (typeof v === 'undefined') {
      return v;
    }
    return this.parseJSON(v);
  };


  /**
   * cookie
  #
   */

  util.prototype.cookie = cookie;


  /**
   * document ready
  #
   */

  util.prototype.ready = docReady;


  /**
   * trim
  #
   */

  util.prototype.trim = function(v) {
    return v.replace(/^\s+|\s+$/gm, '');
  };

  return util;

})();

myutil = new util();


/**
 * tracker class
#
 */

tracker = (function() {
  function tracker() {}

  tracker.prototype.defaults = webanalyser.get();

  tracker.prototype.pixel = '/pixel.gif';

  tracker.prototype.siteid = 0;

  tracker.prototype.store = null;

  tracker.prototype.uuid = null;

  tracker.prototype._tk = function(myData, ht, pixel) {
    var self, tkd;
    self = this;
    tkd = {
      uuid: self.uuid,
      siteid: self.siteid,
      usid: $sessionid,
      ht: ht,
      z: new Date().getTime() - $st
    };
    queue.push({
      pixel: pixel,
      tkd: query.stringify(tkd),
      myData: query.stringify(myData)
    });
    processQueue();
    self.emit('track', tkd.ht, tkd, myData);
    return self;
  };

  tracker.prototype._track = function(ht, extra) {
    var data, k, myData, myDef, pixel, self, v;
    self = this;
    if (extra == null) {
      extra = {};
    }
    if (self.siteid > 0) {
      pixel = myutil.trim(this.pixel);
      myDef = self.defaults;
      if ((pixel.indexOf('//') === 0) && (myDef.dl.indexOf('http') !== 0)) {
        pixel = 'http:' + pixel;
      }
      data = ht === 'pageview' ? defaults(extra, myDef) : extra;
      myData = {};
      for (k in data) {
        v = data[k];
        if (v != null) {
          if (!(typeof v === "string") || (myutil.trim(v).length > 0)) {
            if ((k + '') !== 'undefined' && k !== 'uuid' && k !== 'z') {
              myData[k] = v;
            }
          }
        }
      }
      if (!self.uuid) {
        self.uuid = uuid();
        if (self.store != null) {
          self.store.get('trakless-uuid').then(function(id) {
            if (!id) {
              self.store.set('trakless-uuid', self.uuid);
            }
            self.uuid = id || self.uuid;
            return self._tk(myData, ht, pixel);
          });
        }
      } else {
        self._tk(myData, ht, pixel);
      }
    }
    return this;
  };


  /**
   * track generic method
  #
   * @param {String} ht - hit types with possible values of 'pageview', 'event', 'transaction', 'item', 'social', 'exception', 'timing', 'app', 'custom'
   * @param {Object} extra - extended data
   * @return {Object}
   */

  tracker.prototype.track = function(ht, extra) {
    var self;
    self = this;
    myutil.ready(function() {
      return self._track(ht || 'custom', extra);
    });
    return this;
  };


  /**
   * track pageview
  #
   * @param {Object} extra - extended data
   * @return {Object}
   */

  tracker.prototype.trackPageView = function(extra) {
    return this.track('pageview', extra);
  };


  /**
   * track event
  #
   * @param {String} category
   * @param {String} action
   * @param {String} label
   * @param {String} property
   * @param {String} value - Values must be non-negative.
   * @return {Object}
   */

  tracker.prototype.trackEvent = function(category, action, label, property, value) {
    if (value && value < 0) {
      value = null;
    }
    return this.track('event', {
      ec: category || 'event',
      ea: action,
      el: label,
      ep: property,
      ev: value
    });
  };

  return tracker;

})();

Emitter(tracker.prototype);


/**
 * tracker factory
#
 */

mytrakless = (function() {
  function mytrakless() {}


  /**
   * set default siteid
  #
   * @param {Number} siteid - the site id
   * @return {Object}
   */

  mytrakless.prototype.setSiteId = function(siteid) {
    var mysid;
    mysid = parseInt(siteid);
    $siteid = mysid > 0 ? mysid : $siteid;
  };


  /**
   * set default pixel
  #
   * @param {String} pixel - the default pixel url
   * @return {Object}
   */

  mytrakless.prototype.setPixel = function(pixelUrl) {
    if (pixelUrl) {
      $pixel = pixelUrl || $pixel;
    }
  };


  /**
   * the storage
  #
   * @return {Object}
   */

  mytrakless.prototype.store = xstore;


  /**
   * you can provide different siteid and pixelUrl for in multi-tracker and site scenario
  #
   * @param {Number} siteid - the siteid
   * @param {String} pixelUrl - the pixel url
   * @return {Object}
   */

  mytrakless.prototype.getTracker = function(siteid, pixelUrl) {
    var rst;
    rst = new tracker();
    rst.siteid = siteid != null ? siteid : $siteid;
    rst.pixel = pixelUrl != null ? pixelUrl : $pixel;
    rst.store = xstore;
    return rst;
  };


  /**
   * get the default racker
  #
   */

  mytrakless.prototype.getDefaultTracker = function() {
    if ($defaultTracker == null) {
      $defaultTracker = trakless.getTracker();
    }
    return $defaultTracker;
  };


  /**
   * utility
  #
   */

  mytrakless.prototype.util = myutil;


  /**
   * similar to emit, except it broadcast to parent
  #
   */

  mytrakless.prototype.broadcast = function(en, ed) {
    if (typeof $trakless2 !== "undefined" && $trakless2 !== null) {
      $trakless2.emit(en, ed);
    }
    return this;
  };

  return mytrakless;

})();

trakless = new mytrakless;

Emitter(trakless);

$trakless2 = trakless;

if (win.top !== win) {
  try {
    traklessParent = win.top.trakless;
    $trakless2 = traklessParent;
  } catch (_error) {
    $trakless2 = win.parent.trakless;
  }
}

attrs = {
  site: function(value) {
    return trakless.setSiteId(value);
  },
  pixel: function(value) {
    if (typeof value !== "string") {
      return;
    }
    return trakless.setPixel(value);
  }
};

ref = win.document.getElementsByTagName("script");
for (i = 0, len = ref.length; i < len; i++) {
  script = ref[i];
  if (/trakless/i.test(script.src)) {
    ref1 = ['', 'data-'];
    for (j = 0, len1 = ref1.length; j < len1; j++) {
      prefix = ref1[j];
      for (k in attrs) {
        fn = attrs[k];
        fn(script.getAttribute(prefix + k));
      }
    }
  }
}

win.trakless = trakless;

module.exports = trakless;
